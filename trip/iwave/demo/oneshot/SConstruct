#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations. Note that Madagascar commands do not 
######## require abbreviations 
# Example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
RSFSRC          = os.getenv('RSFSRC')
IWAVE           = os.path.join(RSFSRC,'trip/iwave')
stdmdl          = os.path.join(IWAVE,'demo/main/standardmodel.x')
towed_array     = os.path.join(IWAVE,'trace/main/towed_array.x')
acd             = os.path.join(IWAVE,'acd/main/acd.x')

######### fetch list - non-reproducible data fetched from web archive.
# the format for this dictionary is 
#    filename : [<subdir of "data" directory in archive>, <archive URL>]
# Example: 
# fetches = {
#            'line_fix.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
#            'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu'],	
#           }
fetches = {}

######### non-IWAVE flows - include these in standard Madagascar form
# sunull writes to stdout but does not read from stdin, so set
# stdin=0
Flow('hdr12000.su', 'csq_4layer.rsf',
     sunull + ' nt=651 ntr=400 dt=0.008 | ' + 
     sushw + ' key=sx a=12000 c=0 j=400 | ' + 
     sushw + ' key=gx a=5000 b=25 j=400 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=selev a=-1875 | ' + 
     sushw + ' key=gelev a=-6 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 > ${TARGETS[0]} ',
     stdin=0)

# note: if a filename does not have an embedded ".", it's presumed to
# be the root filename of an rsf.  stdmdl does not read data from
# stdin or write data to stdout (it writes verbose comments and
# warnings, but that's not data) so set both stdin and stdout=0
Flow('vel_4layer','',
      stdmdl + \
      '''
      choose=2 model=10 
      m2_numl=4 m2_val1=1.500 
      m2_rf1=1875 m2_val2=2.0 
      m2_rf2=3600 m2_val3=2.5 
      m2_rf3=6000 m2_val4=3.0 
      hfile=vel_4layer.rsf 
      n1=416 d1=25 f1=0 
      n2=800 d2=25 
      o2=0 n3=1 d3=1 o3=0
      ''',
      stdin=0, stdout=0)

# sfadd writes output to stdout, so it must be left active - 
# however there is not pipe input to this command, so stdin=0
Flow('csq_4layer','vel_4layer',
     'sfadd mode=p ${SOURCES[0]} ${SOURCES[0]} | sfput data_type=csq ', stdin=0)

# smooth csq_4layer to make migration velocity model
Flow('csq_4layersm','csq_4layer','smooth rect1=50 rect2=50 repeat=4')
Flow('csq_4layersm2','csq_4layer','smooth rect1=5 rect2=5 repeat=4')
Flow('dcsq_4layer', ['csq_4layer', 'csq_4layersm2'],
     'add mode=a scale=1,-1 < csq_4layer.rsf csq_4layersm2.rsf') 

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('wavelet_base.su','',
     suwaveform + ' type=gaussd fpeak=5 ns=101 | ' + 
     sushw + ' key=delrt  a=-100 | ' +  
     sugain + ' scale=1.e6 > ${TARGETS[0]} ',
     stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['12000']:
    Flow('wavelet' + foo + '.su', ['wavelet_base.su', 'hdr' + foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# initial data - near-impulse in u0, u1=0 - very wierd, should be fixed!!
Flow('init',None,'makevel n1=416 n2=800 d1=25 d2=25 dlens=200 tlens=200 v000=0 vlens=100 x1lens=1875 x2lens=12000 | sfput id1=0 id2=1 id3=2 dim=2 gdim=3 n3=1 o3=0 d3=1')

# movie-init output file
Flow('movieinit.rsf',['init.rsf','csq_4layer.rsf'],
	'''				
	sfmakevel n1=416 n2=800 n3=33 d1=25 d2=25 d3=160 v000=0  | 
	sfput id1=0 id2=1 id3=2 dim=2 gdim=3 > ../movieinit.rsf; 
	'''
	 +  acd  + ' par=../movieinit.par',
	 stdin=0,stdout=0,workdir='movieinit.work')

# movie-src output file
Flow('moviesrc.rsf',['wavelet12000.su','csq_4layer.rsf'],
	'''
	sfmakevel n1=416 n2=800 n3=33 d1=25 d2=25 d3=160 v000=0  | 
	sfput id1=0 id2=1 id3=2 dim=2 gdim=3 > ../moviesrc.rsf; 
	'''
	 +  acd  + ' par=../moviesrc.par',
	 stdin=0, stdout=0, workdir='moviesrc.work')

# trace-src output file
Flow('shot12000.su',['wavelet12000.su','csq_4layer.rsf'],
	'''
	/bin/cp ../hdr12000.su ../shot12000.su;
	'''
	 +  acd  + ' par=../shot12000.par',
	 stdin=0, stdout=0, workdir='shot12000.work')

# linearized modeling
Flow('born12000.su',['wavelet12000.su','csq_4layersm.rsf','dcsq_4layer.rsf'],
	'''
	/bin/cp ../hdr12000.su ../born12000.su;
	'''
	 +  acd  + ' par=../born12000.par',
	 stdin=0, stdout=0, workdir='born12000.work')

# rtm
t=Flow('mcsq_4layer.rsf',['born12000.su'],
	'''
	sfscale < ../dcsq_4layer.rsf > ../mcsq_4layer.rsf dscale=0.0;
	'''
	 +  acd  + ' par=../migr12000.par',
	 stdin=0, stdout=0, workdir='mcsq_4layer.work')

Result('csq_4layer', 'csq_4layer', 'put label1=Depth unit1=m label2=Distance unit2=m label=V_p^2 unit=m^2/ms^2 | grey color=c mean=y title="Atlantis Cartoon" scalebar=y barreverse=y')

Result('csq_4layersm', 'csq_4layersm', 'put label1=Depth unit1=m label2=Distance unit2=m label=V_p^2 unit=m^2/ms^2 | grey color=c mean=y title="MigVel - Atlantis Cartoon" scalebar=y barreverse=y')

Result('dcsq_4layer', 'dcsq_4layer', 'put label1=Depth unit1=m label2=Distance unit2=m label=V_p^2 unit=m^2/ms^2 | grey color=c mean=y title="Delta V_p^2 - Atlantis Cartoon" scalebar=y barreverse=y')

Result('gauss', 'init', 'put label1=Depth unit1=m label2=Distance unit2=m label=Pressure unit=GPa | grey color=c mean=y clip=100 title="Gaussian Data t=0.0 s" scalebar=y barreverse=y')

Result('frameinit', 'movieinit', 'window f3=32 |put label1=Depth unit1=m label2=Distance unit2=m label=Pressure unit=GPa | grey color=c mean=y clip=500 title="Gaussian data t=5.12 s" scalebar=y barreverse=y')

Result('wavelet','wavelet_base.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Pressure unit1=s unit2=GPa title="Gaussian deriv fmax=5 Hz" unit=GPa |sfgraph')

Result('framesrc', 'moviesrc', 'window f3=32 |put label1=Depth unit1=m label2=Distance unit2=m label=Pressure unit=GPa | grey color=c mean=y clip=1.e+8 title="Point source 5 Hz t=5.12 s" scalebar=y barreverse=y')

Result('shot12000','shot12000.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Distance d2=0.025 o2=5 unit1=s unit2=km title="Node at 12 km" label=Pressure unit=GPa |sfgrey scalebar=y barreverse=y')

Result('born12000','born12000.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Trace unit1=s title="Born x_s=12000 m" unit=GPa | sfgrey')

Result('mcsq_4layer', 'mcsq_4layer', 'put label1=Depth unit1=m label2 = Distance unit2=m label=V_p^2 unit=m^2/ms^2 | grey color=c mean=y title="RTM of Born Shot x_s = 12000" clip=5.e+12')

End()


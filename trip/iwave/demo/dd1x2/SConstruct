#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from batch import getFlowSignature
WORKPATH        = os.getenv('DATAPATH')
# todo: WORKPATH should be checked
#Decider('timestamp-match')
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################
penv = {'stampede' :  { 'batch' : 'slurm',
                        'queue' : 'normal',
                        'acct'  : 'FDTD3D-Cont',
			'mail'  : 'symes@caam.rice.edu',
			'bcmd'  : '/usr/bin/sbatch',
                        'suffix': 'bat', },
         'davinci' :  { 'batch' : 'pbs',
                        'queue' : 'trip',
                        'acct'  : 'symes',
			'mail'  : 'symes@caam.rice.edu',
			'bcmd'  : '/usr/bin/qsub', 
                        'suffix': 'pbs', },
       }

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations. Note that Madagascar commands do not 
######## require abbreviations 
# Example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
IWAVE           = os.getenv('NEWIWAVE')
stdmdl          = os.path.join(IWAVE,'demo/main/standardmodel.x')
towed_array     = os.path.join(IWAVE,'trace/main/towed_array.x')
acd             = os.path.join(IWAVE,'newacd/main/acd.x')

######### fetch list - non-reproducible data fetched from web archive.
# the format for this dictionary is 
#    filename : [<subdir of "data" directory in archive>, <archive URL>]
# Example: 
# fetches = {
#            'line_fix.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
#            'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu'],	
#           }
fetches = {}

######### non-IWAVE flows - include these in standard Madagascar form
# sunull writes to stdout but does not read from stdin, so set
# stdin=0
Flow('hdr12000.su', 'csq_4layer.rsf',
     sunull + ' nt=651 ntr=400 dt=0.008 | ' + 
     sushw + ' key=sx a=12000 c=0 j=400 | ' + 
     sushw + ' key=gx a=5000 b=25 j=400 | ' + 
     sushw + ' key=delrt a=0 | ' +  
     sushw + ' key=selev a=-1875 | ' + 
     sushw + ' key=gelev a=-6 | ' + 
     sushw + ' key=scalel a=0 | ' + 
     sushw + ' key=scalco a=0 | ' + 
     suchw + ' key1=offset key2=gx key3=sx b=1 c=-1 > ${TARGETS[0]} ',
     stdin=0)

# note: if a filename does not have an embedded ".", it's presumed to
# be the root filename of an rsf.  stdmdl does not read data from
# stdin or write data to stdout (it writes verbose comments and
# warnings, but that's not data) so set both stdin and stdout=0
Flow('vel_4layer',None,
      stdmdl + \
      '''
      choose=2 model=10 
      m2_numl=4 m2_val1=1.500 
      m2_rf1=1875 m2_val2=2.0 
      m2_rf2=3600 m2_val3=2.5 
      m2_rf3=6000 m2_val4=3.0 
      hfile=vel_4layer.rsf 
      n1=416 d1=25 f1=0 
      n2=800 d2=25 
      o2=0 n3=1 d3=1 o3=0
      ''',
      stdin=0, stdout=0)

# sfadd writes output to stdout, so it must be left active - 
# however there is not pipe input to this command, so stdin=0
Flow('csq_4layer','vel_4layer',
     'sfadd mode=p ${SOURCES[0]} ${SOURCES[0]} | sfput data_type=csq ', stdin=0)

# smooth csq_4layer to make migration velocity model
Flow('csq_4layersm','csq_4layer','smooth rect1=50 rect2=50 repeat=4')
Flow('csq_4layersm2','csq_4layer','smooth rect1=5 rect2=5 repeat=4')
Flow('dcsq_4layer', ['csq_4layer', 'csq_4layersm2'],
     'add mode=a scale=1,-1 < csq_4layer.rsf csq_4layersm2.rsf') 

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('wavelet_base.su','',
     suwaveform + ' type=gaussd fpeak=5 ns=101 | ' + 
     sushw + ' key=delrt  a=-100 > ${TARGETS[0]} ',
     stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['12000']:
    Flow('wavelet' + foo + '.su', ['wavelet_base.su', 'hdr' + foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

NP1 = 1
NP2 = 2

jobs = [{ 'job': 'shot12000',
          'pre': '/bin/cp hdr12000.su shot12000.su' ,
          'cmd': acd  + ' par=../shot12000.par mpi_np1=' + str(NP1) + ' mpi_np2=' + str(NP2) , 
          'src': ['hdr12000.su', 'wavelet12000.su', 'csq_4layer.rsf'],
	  'tgt': ['shot12000.su'],
          'exe' : {'platf': 'mpi', 'ppn'   : str(NP1*NP2) }	 
        },
	{ 'job': 'born12000',
          'pre': '/bin/cp hdr12000.su born12000.su' ,
          'cmd': acd  + ' par=../born12000.par  mpi_np1=' + str(NP1) + ' mpi_np2=' + str(NP2),
          'src': ['hdr12000.su', 'wavelet12000.su', 'csq_4layersm.rsf', 'dcsq_4layer.rsf'],
	  'tgt': ['born12000.su'],
          'exe' : {'platf': 'mpi', 'ppn'   : str(NP1*NP2) }	 
	},
	{ 'job': 'rtm12000',
          'pre': 'sfcp csq_4layer.rsf mcsq_4layer.rsf' ,
          'cmd': acd  + ' par=../migr12000.par  mpi_np1=' + str(NP1) + ' mpi_np2=' + str(NP2),  
          'src': ['born12000.su', 'wavelet12000.su', 'csq_4layersm.rsf'],
	  'tgt': ['mcsq_4layer.rsf'],
          'exe' : {'platf': 'mpi', 'ppn'   : str(NP1*NP2) }	 
	},
]

# loop for jobs defined in jobs dictionary
for i in range(len(jobs)):
    sig = getFlowSignature(jobs[i]['job']+'.work',jobs[i], penv)
    if sig == None:
        print 'Error return from iwave.getFlowSignature - cannot set up job = ' + i
    else:
#        print 'sig.cmd = ' + sig['cmd'] + '\n'
#        print 'sig.src = ' + ' '.join(sig['src']) + '\n'
#        print 'sig.tgt = ' + ' '.join(sig['tgt']) + '\n'
#        print 'sig.wcd = ' + sig['wcd'] + '\n'
        t=Flow(sig['dir'],None,sig['wcd'],stdin=0,stdout=0)  
        Flow(sig['tgt'], sig['src']+[sig['dir']], sig['cmd'], stdin=0, stdout=0)
	Clean(t,sig['dir'])

Result('shot120001x2','shot12000.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Distance d2=0.025 o2=5 unit1=s unit2=km title="Node at 12 km" label=Pressure unit=GPa |sfgrey scalebar=y barreverse=y')

Result('born120001x2','born12000.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Trace unit1=s title="Born x_s=12000 m" unit=GPa | sfgrey')

Result('mcsq_4layer1x2', 'mcsq_4layer', 'put label1=Depth unit1=m label2 = Distance unit2=m label=V_p^2 unit=m^2/ms^2 | grey color=c mean=y title="RTM of Born Shot x_s = 12000" clip=5.e+12')

End()


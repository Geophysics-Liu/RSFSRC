#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from batch import getFlowSignature
from batch import getThreads
import os

thispath        = os.getcwd()
WORKPATH = thispath
# both IWAVE and WORKPATH should be checked
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

penv = {'stampede' :  { 'batch' : 'slurm',
                        'queue' : 'normal',
                        'acct'  : 'FDTD3D-Cont',
			'mail'  : 'yh15@caam.rice.edu',
			'bcmd'  : '/usr/bin/sbatch',
                        'suffix': 'bat', },
         'davinci' :  { 'batch' : 'pbs',
                        'queue' : 'trip',
                        'acct'  : 'yh15',
			'mail'  : 'yh15@caam.rice.edu',
			'bcmd'  : '/usr/bin/qsub', 
                        'suffix': 'pbs', },
       }

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
IWAVE           = os.getenv('NEWIWAVE')
towed_array     = os.path.join(IWAVE,'trace/main/towed_array.x')
acd             = os.path.join(IWAVE,'acd/main/acd.x')
acdiva          = os.path.join(IWAVE,'acd/main/acdiva.x')
acdcgne         = os.path.join(IWAVE,'acd/main/acdcgne.x')
acdlbfgs        = os.path.join(IWAVE,'acd/main/acdlbfgs.x')
acdadjtest      = os.path.join(IWAVE,'acd/main/acdadjtest.x')

fetches = {
    'line_fix.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu'],
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])   

Flow('vel24','velocity.HH','dd form=native | window j1=6 j2=6')
Flow('csq24base','vel24','add mode=p < vel24.rsf vel24.rsf |put data_type=csq')
Flow('rext','csq24base','window f2=383 n2=1 | spray axis=2 d=24 n=60')
Flow('csq24',['csq24base', 'rext'],'cat axis=2 d=24 csq24base.rsf rext.rsf',stdin=0)  
Flow('csq24hom','','makevel n1=126 d1=24 n2=444 d2=24 o1=0 o2=0 v000=2.25 | put data_type=csq data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m^2/ms^2 esize=4',stdin=0) 
Flow('csq24sm','csq24','smooth rect1=10 rect2=10 repeat=2')
Flow('csq24sm2','csq24','smooth rect1=5 rect2=5 repeat=2')
Flow('dcsq24', ['csq24', 'csq24sm2'],'add mode=a scale=1,-1 < csq24.rsf csq24sm2.rsf |window min1=180| sfpad beg1=8') 
Flow('csqext.rsf','csq24sm.rsf', 'spray axis=3 n=60 d=1.0 o=0.0 label="sx" unit="index"| sfput id1=0 id2=1 id3=3 dim=2 gdim=3')
Flow('dcsqext.rsf','dcsq24.rsf', 'spray axis=3 n=60 d=1.0 o=0.0 label="sx" unit="index"| sfput id1=0 id2=1 id3=3 dim=2 gdim=3')

Flow('hdr100m.su','line_fix.su', suwind + ' key=sx j=100 tmax=2')

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('wavelet_base.su','',
     suwaveform + ' type=ricker1 fpeak=10 ns=51 | ' + 
     sushw + ' key=delrt  a=-100 > ${TARGETS[0]} ',
     stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['hdr100m']:
    Flow('wavelet_' + foo + '.su', ['wavelet_base.su', foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

# pre-cooked exes
exe_serial  = {}
exe_getafix = {'platf':'mpi', 'nodes':'1', 'ppn':'6'}
exe_davinci = {'platf':'davinci','nodes':'2','ppn':'16','wall':'00:30:00'}
exe_davinci1ppn = {'platf':'davinci','nodes':'1','ppn':'1','wall':'01:30:00'}

# choose
exe = exe_getafix
exe1ppn = exe_davinci1ppn

asfadd = os.path.join(os.getenv('RSFROOT'),'bin/sfadd')

jobs = [
        { 'job': 'line100m',
           'pre': '/bin/cp hdr100m.su line100m.su' ,
           'cmd': acd  + ''' deriv=0 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
 csq=../csq24.rsf source=../wavelet_hdr100m.su \
 data=../line100m.su partask=''' + getThreads(exe),       
           'src': ['hdr100m.su', 'wavelet_hdr100m.su', 'csq24.rsf'],
 	  'tgt': ['line100m.su'],
           'exe' : exe
         },
         { 'job': 'born100m',
           'pre': '/bin/cp hdr100m.su born100m.su' ,
           'src': ['hdr100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf', 'dcsq24.rsf'],
 	  'tgt': ['born100m.su'],
           'cmd': acd  + ' ' + '''deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
 csq=../csq24sm.rsf csq_d1=../dcsq24.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su partask=''' + getThreads(exe),       
           'exe' : exe
         },
         { 'job': 'extborn100m',
           'pre': '/bin/cp hdr100m.su extborn100m.su' ,
           'src': ['hdr100m.su', 'wavelet_hdr100m.su', 'csqext.rsf', 'dcsqext.rsf'],
 	  'tgt': ['extborn100m.su'],
           'cmd': acd  + ' ' + '''deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
 csq=../csqext.rsf csq_d1=../dcsqext.rsf source=../wavelet_hdr100m.su \
 data=../extborn100m.su partask=''' + getThreads(exe),       
           'exe' : exe
         },
         { 'job': 'rtm100m',
           'pre': 'cp csq24.rsf rtm100m.rsf' ,
           'cmd': acd  + ' ' +  '''deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
 nsnaps=20 csq=../csq24sm.rsf csq_b1=../rtm100m.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su partask=''' + getThreads(exe),       
           'src': ['born100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf'],
 	  'tgt': ['rtm100m.rsf'],
           'exe' : exe
         },
         { 'job': 'extrtm100m',
 	  'pre': 'spray < csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id1=1 id3=3 > extrtm100m.rsf',
           'cmd': acd  + ' ' +  '''deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
 nsnaps=20 csq=../csq24sm.rsf csq_b1=../extrtm100m.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su partask=''' + getThreads(exe),       
           'src': ['born100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf'],
 	  'tgt': ['extrtm100m.rsf'],
           'exe' : exe
         },
         { 'job': 'extrtm100m_2',
 	  'pre': 'spray < csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id1=1 id3=3 > extrtm100m_2.rsf',
           'cmd': acd  + ' ' +  '''deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
 nsnaps=20 csq=../csqext.rsf csq_b1=../extrtm100m_2.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su partask=''' + getThreads(exe),       
           'src': ['born100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf'],
 	  'tgt': ['extrtm100m_2.rsf'],
           'exe' : exe
         },
 	{'job': 'borninv100m',
 	 'pre': asfadd + ' < csq24.rsf > icsq100m.rsf scale=0.0',
 	 'cmd': acdcgne + ' ' +  '''order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 \
 csq=../csq24.rsf rcsq=../csq24sm.rsf icsq=../icsq100m.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su outfile=cgne.out ResidualTol = 0.01 GradientTol = 0.01 \
 MaxIter = 20 dataest = est.su datares = res.su dump_pars=1 dump_steps=1 partask=''' + getThreads(exe),
 	 'src': ['born100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf'],
 	 'tgt': ['icsq100m.rsf'],
 	 'exe': exe
 	},	 
 	{'job': 'borninv100mext',
 	 'pre': asfadd + ' < csqext.rsf > icsq100mext.rsf scale=0.0',
 	 'cmd': acdcgne + ' ' +
         'order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
         'csq=../csqext.rsf rcsq=../csqext.rsf icsq=../icsq100m_2.rsf ' +
         'source=../wavelet_hdr100m.su data=../born100m.su ' +
         'outfile=cgne.out ResidualTol = 0.01 GradientTol = 0.01 ' + 
         'MaxIter = 25 dataest = est.su datares = res.su  partask=' + getThreads(exe),
 	 'src': ['born100m.su', 'wavelet_hdr100m.su', 'csqext.rsf'],
 	 'tgt': ['icsq100mext.rsf'],
 	 'exe': exe
 	},	 
 	{'job': 'extborninv100m_1ppn',
 	 'pre': 'spray < csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id1=1 id3=3 > exticsq100m_1ppn.rsf',
 	 'cmd': acdcgne + ' ' +  '''order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 \
 csq=../csqext.rsf rcsq=../csqext.rsf icsq=../exticsq100m_1ppn.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su outfile=cgne.out ResidualTol = 0.01 GradientTol = 0.01 \
 MaxIter = 5 dataest = est.su datares = res.su dump_pars=1 dump_steps=1 partask=''' + getThreads(exe1ppn),
 	 'src': ['born100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf'],
 	 'tgt': ['exticsq100m_1ppn.rsf'],
 	 'exe': exe
 	},	 
 	{ 'job': 'ds100m',
 	  'pre': 'spray < csq24.rsf axis=3 n=60 d=1.0 o=0.0| put dim=2 gdim=3 id1=0 id1=1 id3=3 > ds100m.rsf',
 	  'cmd': acdiva + ' ' + '''order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 \
 csq=../csq24.rsf csqext=../ds100m.rsf init_velsq=../csq24sm.rsf \
 final_velsq=../estcsq.rsf reflectivity=../ds100m.rsf source=../wavelet_hdr100m.su \
 data=../born100m.su outfile=cgne.out ResidualTol = 0.01 GradientTol = 0.01 \
 MaxIter = 20 MaxLBFGSIter=0 dataest = est100m.su datares = res100m.su DSWeight=0.1 \
 partask='''+getThreads(exe),
 	  'src': ['born100m.su', 'wavelet_hdr100m.su', 'csq24sm.rsf'],
 	  'tgt': ['ds100m.rsf'],
           'exe' : exe
 	},
 	{'job':'at100m',
          'pre':' ',
 	 'cmd': acdadjtest + ' ' + 
 	 'deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
 	 'csq=../csq24sm.rsf source=../wavelet_hdr100m.su data=../born100m.su ' +
 	 'outfile=../at100m.txt partask=' + getThreads(exe),
 	 'src': ['born100m.su', 'wavelet_hdr100m.su','csq24sm.rsf'],
 	 'tgt': 'at100m.txt',
 	 'exe': exe
 	},	 
	{'job':'at100mext',
         'pre':' ',
	 'cmd': acdadjtest + ' ' + 
	 'deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
	 'csq=../csqext.rsf source=../wavelet_hdr100m.su data=../born100m.su ' +
	 'outfile=../at100mext.txt partask=' + getThreads(exe),
	 'src': ['born100m.su', 'wavelet_hdr100m.su','csqext.rsf'],
	 'tgt': 'at100mext.txt',
	 'exe': exe
	},	 
 	{'job':'at100mext_1ppn',
          'pre':' ',
 	 'cmd': acdadjtest + ' ' + 
 	 'deriv=1 adjoint=1 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
 	 'csq=../csqext.rsf source=../wavelet_hdr100m.su data=../born100m.su ' +
 	 'outfile=../at100mext_1ppn.txt partask=' + getThreads(exe1ppn),
 	 'src': ['born100m.su', 'wavelet_hdr100m.su','csqext.rsf'],
 	 'tgt': 'at100mext_1ppn.txt',
 	 'exe': exe1ppn
 	},	 
	]


#  loop for jobs defined in jobs dictionary
for i in range(len(jobs)):
    sig = getFlowSignature(jobs[i]['job']+'.work',jobs[i], penv)
    if sig == None:
        print 'Error return from iwave.getFlowSignature - cannot set up job = ' + i
    else:
#        print 'sig.cmd = ' + sig['cmd'] + '\n'
#        print 'sig.src = ' + ' '.join(sig['src']) + '\n'
#        print 'sig.tgt = ' + ' '.join(sig['tgt']) + '\n'
        t=Flow(sig['dir'],None,sig['wcd'],stdin=-1,stdout=-1)  
        Flow(sig['tgt'], sig['src'] + [sig['dir']], sig['cmd'], stdin=-1, stdout=-1)
	Clean(t,sig['dir'])

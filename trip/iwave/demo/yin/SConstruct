#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from iwave import getFlowSignature
WORKPATH        = os.getenv('DATAPATH')
# todo: WORKPATH should be checked
#Decider('timestamp-match')
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations. Note that Madagascar commands do not 
######## require abbreviations 
# Example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwind          = os.path.join(CWPROOT,'bin/suwind')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
RSFBIN          = os.getenv('RSFROOT') + '/bin/'
stdmdl          = os.path.join(RSFBIN,'sfstandardmodel')
IWAVE           = os.getenv('NEWIWAVE')
towed_array     = os.path.join(IWAVE,'trace/main/towed_array.x')
acd             = os.path.join(IWAVE,'acd/main/acd.x')
acdcgne         = os.path.join(IWAVE,'acd/main/acdcgne.x')
MPIROOT         = os.getenv('MPIROOT')
mpirun          = os.path.join(MPIROOT,'bin/mpirun')

######### original dimensions
N1_0=751
N2_0=2301
DX_0=4

######### number of grid pts in PML layer
PML = 40
######### subsample factor
SUBS = 6
######### window depth for reflectivity
ZW = 200

N1=int((N1_0-1)/SUBS) + 1
N2=int((N2_0-1)/SUBS) + 1
DX=SUBS*DX_0
NDW = int(ZW/DX)

SDX=str(DX)

######### fetch list - non-reproducible data fetched from web archive.
# the format for this dictionary is 
#    filename : [<subdir of "data" directory in archive>, <archive URL>]
# Example: 
fetches = {
           'line_fix.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
           'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu'],
          }
#fetches = {}
for file in fetches.keys():
    Fetch(file, fetches[file][0],server=fetches[file][1])

# csq
Flow('velorig', 'velocity.HH', 'dd form=native')
Flow('vel','velocity.HH','dd form=native | window j1=' + str(SUBS) + ' j2=' + str(SUBS))

Flow('csqbase','vel','add mode=p < vel.rsf vel.rsf | put id1=0 id2=1 dim=2 gdim=2 ')

###### add pml layers to the original model
Flow('rext','csqbase', 'window f2=' + str(N2-1) + ' n2=1 | spray axis=2 d=' + SDX +' n='+str(PML) + '|put o3=0 n3=1 d3=1 n4=1 o4=0 d4=1')
Flow('lext','csqbase', 'window f2=0 n2=1 | spray axis=2 d=' + SDX +' n='+str(PML) + '| put o2=' + str(-PML*DX) + ' o3=0 n3=1 d3=1 n4=1 o4=0 d4=1')
Flow('rcsq',['csqbase', 'rext'],'cat axis=2 d=' + SDX + ' csqbase.rsf rext.rsf',stdin=0)
Flow('lcsq',['lext', 'rcsq'],'cat axis=2 d=' + SDX + ' lext.rsf rcsq.rsf',stdin=0)
Flow('sext','lcsq', 'window f1='+ str(N1-1) + ' n1=1 | spray axis=1 d=' + SDX + ' n='+str(PML))
Flow('next','lcsq', 'window f1=0 n1=1 | spray axis=1 d=' + SDX + ' n='+str(PML) + '|put o1=' + str(-PML*DX) + ' n3=1 n4=1 n5=1 n6=1 d3=1 d4=1 d5=1 d6=1 o3=0 o4=0 o5=0 o6=0')

# csq for freesurface case
Flow('csq',['sext', 'lcsq'],'cat axis=1 d=' + SDX + ' lcsq.rsf sext.rsf',stdin=0)
# csq for pml at the top of the model
Flow('csq_2',['next', 'csq'],'cat axis=1 d=' + SDX + '  next.rsf csq.rsf',stdin=0)

Flow('csqsm','csq','smooth rect1=10 rect2=10 repeat=2')
Flow('csqsm2','csq','smooth rect1=5 rect2=5 repeat=2')

Flow('dcsq', ['csq', 'csqsm2'],'add mode=a scale=1,-1 < csq.rsf csqsm2.rsf |window f1=' + str(NDW) + '|pad beg1=' + str(NDW))

Flow('csq_2sm','csq_2','smooth rect1=10 rect2=10 repeat=2')
Flow('csq_2sm2','csq_2','smooth rect1=5 rect2=5 repeat=2')
Flow('dcsq_2', ['csq_2', 'csq_2sm2'],'add mode=a scale=1,-1 < csq_2.rsf csq_2sm2.rsf | window f1=' + str(PML+NDW) + '|pad beg1=' + str(PML+NDW))

# hdr
Flow('line100m.su','line_fix.su', suwind + ' key=sx j=100')
Flow('shot6km.su', 'line100m.su', suwind + ' key=sx min=6000 max=6000')

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('wavelet_base.su','',
     suwaveform + ' type=ricker1 fpeak=8 ns=101 | ' + 
     sushw + ' key=delrt  a=-200 | ' +  
     sugain + ' scale=1.e6 > ${TARGETS[0]} ',
     stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

# use naming convention: time series stored in wavelet_base, 
# headers for experiment foo stored in hdrfoo.su, wavelet in
# waveletfoo.su

for foo in ['line100m', 'shot6km']:
    Flow('wavelet_' + foo + '.su', ['wavelet_base.su', foo + '.su'],
         towed_array + 
         '''
         data=${SOURCES[1]} 
         src=${SOURCES[0]} 
         towed=${TARGETS[0]}
         ''',
         stdin=0, stdout=0)

## movie-src output file --- freesurface on top
#t=Flow(['moviesrc.work', 'moviesrc.rsf'],['wavelet_shot6km.su','csqsm.rsf'],
#        '''
#        sfmakevel n1=166 n2=464 n3=33 d1= d2= d3=160 v000=0  |
#        sfput id1=0 id2=1 id3=2 dim=2 gdim=3 > moviesrc.rsf;
#        /bin/rm -rf moviesrc.work;
#        /bin/mkdir moviesrc.work;
#        cd moviesrc.work;
#        '''
#         +  acd  + ' par=../moviesrc.par freesurface=1 order=4 pmlampl=0.06 csq=../csqsm.rsf ',stdin=0,stdout=0)
#Clean(t,'moviesrc.work')
#
## movie-src output file --- pml on top
#t=Flow(['moviesrc_2.work', 'moviesrc_2.rsf'],['wavelet_shot6km_2.su','csq_2sm.rsf'],
#        '''
#        sfmakevel n1=206 n2=464 n3=33 d1= d2= d3=160 v000=0  |
#        sfput id1=0 id2=1 id3=2 dim=2 gdim=3 > moviesrc_2.rsf;
#        /bin/rm -rf moviesrc_2.work;
#        /bin/mkdir moviesrc_2.work;
#        cd moviesrc_2.work;
#        '''
#         +  acd  + ' par=../moviesrc.par freesurface=0 order=4 pmlampl=0.06 csq=../csq_2sm.rsf source=../wavelet_shot6km_2.su movie=../moviesrc_2.rsf',stdin=0,stdout=0)
#Clean(t,'moviesrc_2.work')
#
## linearized modeling
#t=Flow(['born6km.work', 'born6km.su'],['wavelet_shot6km.su','csqsm.rsf','dcsq.rsf'],
#	'''
#	/bin/cp shot6km.su born6km.su;
#	/bin/rm -rf born6km.work; 
#	/bin/mkdir born6km.work; 
#	cd born6km.work;
#	'''
#        + acd  + ' ' +
#        '''
#        deriv=1 adjoint=0 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
#csq=../csqsm.rsf csq_d1=../dcsq.rsf \
#source=../wavelet_shot6km.su data=../born6km.su
#        ''',
#        stdin=0,stdout=0)
#Clean(t,'born6km.work')
#
## linearized modeling
#t=Flow(['born6km_2.work', 'born6km_2.su'],['wavelet_shot6km.su','csq_2sm.rsf','dcsq_2.rsf'],
#	'''
#	/bin/cp shot6km.su born6km_2.su;
#	/bin/rm -rf born6km_2.work; 
#	/bin/mkdir born6km_2.work; 
#	cd born6km_2.work;
#	'''
#        + acd  + ' ' +
#        '''
#        deriv=1 adjoint=0 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
#csq=../csq_2sm.rsf csq_d1=../dcsq_2.rsf \
#source=../wavelet_shot6km.su data=../born6km_2.su
#        ''',
#        stdin=0,stdout=0)
#Clean(t,'born6km_2.work')
#
## rtm
#t=Flow(['migr6km.work', 'mcsq.rsf'],['born6km.su'],
#	'''
#	sfscale < csq.rsf > mcsq.rsf dscale=0.0;
#	/bin/rm -rf migr6km.work; 
#	/bin/mkdir migr6km.work; 
#	cd migr6km.work;
#	'''
#        + acd  + ' ' +
#        '''
#        deriv=1 adjoint=1 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
#nsnaps=20 csq = ../csqsm.rsf csq_b1 = ../mcsq.rsf \
#source = ../wavelet_shot6km.su data=../born6km.su
#        ''',stdin=0,stdout=0)
#Clean(t,'migr6km.work')
#
## rtm
#t=Flow(['migr6km_2.work', 'mcsq_2.rsf'],['born6km_2.su'],
#	'''
#	sfscale < csq_2.rsf > mcsq_2.rsf dscale=0.0;
#	/bin/rm -rf migr6km_2.work; 
#	/bin/mkdir migr6km_2.work; 
#	cd migr6km_2.work;
#	'''
#        + acd  + ' ' + 
#        '''
#        deriv=1 adjoint=1 order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 \
#nsnaps=20 csq=../csq_2sm.rsf csq_b1=../mcsq_2.rsf \
#source=../wavelet_shot6km.su data=../born6km_2.su 
#        ''',stdin=0,stdout=0)
#Clean(t,'migr6km_2.work')
#
#
# Born inversion - one shot
t=Flow(['icsq6km.work', 'icsq6km.rsf'],['born6km.su', 'wavelet_shot6km.su', 'csqsm.rsf'],
        '''
        sfadd < csq.rsf > icsq6km.rsf scale=0.0;
        /bin/rm -rf icsq6km.work;
        /bin/mkdir icsq6km.work;
        cd icsq6km.work;
        '''
        +  acdcgne  + ' ' +
        '''
        order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
        csq=../csq.rsf rcsq=../csqsm.rsf icsq=../icsq6km.rsf source=../wavelet_shot6km.su 
        data=../born6km.su outfile=cgne.out ResidualTol = 0.01 GradientTol = 0.01 
        MaxIter = 3 dataest = est.su datares = res.su
        ''',stdin=0, stdout=0)
Clean(t,'icsq6km.work')

# Born inversion - one shot - pml layer on top
t=Flow(['icsq6km_2.work', 'icsq6km_2.rsf'],['born6km_2.su', 'wavelet_shot6km.su', 'csq_2sm.rsf'],
        '''
        sfadd < csq_2.rsf > icsq6km_2.rsf scale=0.0;
        /bin/rm -rf icsq6km_2.work;
        /bin/mkdir icsq6km_2.work;
        cd icsq6km_2.work;
        '''
        +  acdcgne  + ' ' +
        '''
        order=4 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 
        csq=../csq_2.rsf rcsq=../csq_2sm.rsf icsq=../icsq6km_2.rsf source=../wavelet_shot6km.su
        data=../born6km_2.su outfile=cgne.out ResidualTol = 0.01 GradientTol = 0.01
        MaxIter = 3 dataest = est_2.su datares = res_2.su
        ''',
        stdin=0,stdout=0)
Clean(t,'icsq6km_2.work')


End()


/* This file is automatically generated. DO NOT EDIT! */

#ifndef _fft_h
#define _fft_h


void fft(float *xx /*input data*/, 
		    kiss_fft_cpx *xxf  /*spectrum*/, 
	 	    int n1 /*length of array*/);
/*< forward fourier tranform  >*/


void ifft(kiss_fft_cpx *xxf /*spectrum*/, 
		    float *xx  /*output data*/, 
	 	    int n1 /*length of array*/);
/*< inverse fourier tranform >*/


void tfft(	float **xx /*input data*/, 
		    kiss_fft_cpx **xxf  /*spectrum*/, 
			int n2 		/* length of second axis */,
	 	    int ntfft 	/* optimized length of first axis */);
/*< forward fourier tranform along the first axis >*/


void itfft(kiss_fft_cpx **xxf /*spectrum*/, 
		    float **xx  /*output data*/, 
			int n2	 	/* length of second axis */,
	 	    int ntfft 	/* optimized length of first axis */);
/*< inverse fourier tranform along the first axis >*/


void xfft(	kiss_fft_cpx **xx 	/*input data*/, 
		    kiss_fft_cpx **xxf  /*spectrum*/, 
	 	    int n1 /* length of first axis */,
			int nxfft /* optimized length of second axis */);
/*< forward fourier tranform along the second axis >*/


void ixfft( kiss_fft_cpx **xxf /*spectrum*/, 
		    kiss_fft_cpx **xx /*output data*/, 
	 	    int n1 /* length of first axis */,
			int nxfft /* optimized length of second axis */);
/*< inverse fourier tranform along the second axis >*/


kiss_fft_cpx cmplx(float re, float im);
/*< complex number >*/

#endif

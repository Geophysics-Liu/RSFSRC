/* This file is automatically generated. DO NOT EDIT! */

#ifndef _hwt3d_h
#define _hwt3d_h


#define MISSING -1


/*------------------------------------------------------------*/
void hwt3d_init(sf_axis      az_in    /* z axis   */,
		sf_axis      ax_in    /* x axis   */,
		sf_axis      ay_in    /* y axis   */,
		sf_axis      at_in    /* t axis   */,
		sf_axis      ag_in    /* g axis   */,
		sf_axis      ah_in    /* h axis   */);
/*< initialize hwt3d >*/


void hwt3d_rand(sf_axis      az_in    /* z axis   */,
		sf_axis      ax_in    /* x axis   */,
		sf_axis      ay_in    /* y axis   */,
		sf_axis      at_in    /* t axis   */);
/*< initialize hwt3d (reduced # of variables) >*/


/*------------------------------------------------------------*/
float hwt3d_getv(float ***vv,
		 pt3d P);
/*< get velocity from 3-D cube by linear interpolation >*/


bool hwt3d_cusp(pt3d Tm, /* it-1,ig   ,ih   */
		pt3d To, /* it  ,ig   ,ih   */
		pt3d Gm, /* it  ,ig-1 ,ih   */
		pt3d Gp, /* it  ,ig+1 ,ih   */
		pt3d Hm, /* it  ,ig   ,ih-1 */
		pt3d Hp) /* it  ,ig   ,ih+1 */;
/*< find cusp points >*/


pt3d hwt3d_wfttr(float ***vv,
		 pt3d Tm, 
		 pt3d To,
		 pt3d Gm, 
		 pt3d Gp,
		 pt3d Hm,
		 pt3d Hp);
/*< wavefront tracing >*/


pt3d hwt3d_raytr(float ***vv,
		 pt3d Tm, 
		 pt3d To,
		 int scaleray);
/*< ray tracing >*/


pt3d hwt3d_step(float ***vv,
		pt3d Tm, 
		pt3d To, 
		pt3d Gm, 
		pt3d Gp,
		pt3d Hm,
		pt3d Hp);
/*< one HWT time step >*/


/*------------------------------------------------------------*/
void hwt3d_lint(float*** tt, /* traveltime cube */
		float*** ll, /*     length cube */
		pt3d     P,  /* coordinates (x,y,z) */
		float    t,  /*   time from source to P */
		float    l)  /* length from source to P */;
/*< interpolate traveltime >*/


/*------------------------------------------------------------*/
void hwt3d_tint(float*** tt, /* traveltime cube */
		float*** ll, /*     length cube */
		pt3d     P,  /* coordinates (x,y,z) */
		float    t,  /*   time from source to P */
		float    l)  /* length from source to P */;
/*< interpolate traveltime >*/


/*------------------------------------------------------------*/
void hwt3d_nint(float*** tt, /* traveltime cube */
		float*** ll, /*     length cube */
		pt3d     P,  /* coordinates (x,y,z) */
		float    t,  /*   time from source to P */
		float    l)  /* length from source to P */;
/*< interpolate traveltime >*/


/*------------------------------------------------------------*/
void hwt3d_fill(float*** tt, /* traveltime cube */
		int n);
/*< fill holes >*/


void hwt3d_xint(float*** tt, /* traveltime cube */
		float*** ll, /*     length cube */
		pt3d     P,  /* coordinates (x,y,z) */
		float    t,  /*   time from source to P */
		float    l)  /* length from source to P */;
/*< interpolate traveltime >*/

#endif

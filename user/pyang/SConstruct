import os, sys, re, string
sys.path.append('../../framework')
import bldutil

######################################################################
# C main programs
progs = '''cohn dlct fpocs2d fpocs3d fwi2d fbrec2d 
istinterp istpad istseislet lsrtm2d lsprtm2d lsinterp2d 
mwni2d myradon1 myradon2 mythresh mshots mcaseislet matflip modeling2d
pocs3d pocs pocsseislet rtm2d rtmadcig mysnr
Testfd2d Testfd3d Testeb Testelastic2d Testaniso Testspml
viscoa2d viscoe2d 
'''


######################################################################
# C++ main programs
ccprogs = '''
'''

######################################################################
# MPI main programs
mpi_progs = '''
mpifwi
'''

######################################################################
# CUDA main programs
cuda_progs = '''
fbrec gpurtm gpufwi genshots gpufd3d gpufbrec3d 
'''

######################################################################
# CUDA+MPI main programs
cuda_mpi_progs = '''
mpigpufwi
'''

######################################################################
try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    srcroot = '../..' 
    glob_build = True 	# scons command launched in RSFSRC
    env = env.Clone()
except: # local version
    glob_build = False 	# scons command launched in the local directory
    srcroot = os.environ.get('RSFSRC', '../..')
    sys.path.append(os.path.join(srcroot,'framework'))
    env = bldutil.Debug()
    root = bindir = libdir = pkgdir = None
    SConscript('../pwd/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsfpwd',
                  env.get('DYNLIB','')+'rsf'])

######################################################################
# F90 mains
targets = bldutil.UserSconsTargets()
targets.f90 = ''' 
'''

F90 = env.get('F90')
if 'f90' in env.get('API',[]) and F90:
	F90base= os.path.basename(F90)
 	if F90base[:8]== 'gfortran' or F90base[:3]=='gfc':
		env.Append(F90FLAGS=' -fopenmp -fbackslash ')
        elif F90base == 'ifort':
    		env.Append(F90FLAGS=' -module -fbackslash -fopenmp ${SOURCE.dir}')

#targets.build_all(env, glob_build, srcroot, bindir, libdir, pkgdir)

######################################################################
# fftw settings
fftw = env.get('FFTWOMP')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

src = Glob('[a-z]*.c')

for source in Split(src):
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

######################################################################
# compiling C programs
mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if fftw:
        env.StaticObject('M'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw')
    if root:
        env.Install(bindir,prog)

######################################################################
# compiling C++ programs
if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

######################################################################
# compiling MPI programs
mpicc = env.get('MPICC')
mpi_mains = Split(mpi_progs)
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
    	prog = env.Program(prog,map(lambda x: x + '.c',sources),CC=mpicc)
    else:
	prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)


######################################################################
# compiling CUDA programs
CTP = env.get('CUDA_TOOLKIT_PATH')
NVCC = env.get('NVCC')

cuda_mains = Split(cuda_progs)
for prog in cuda_mains:
    if CTP and NVCC:
        cfile = env.Command('CUDA'+prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
        cc = env.get('CC')
        cflags = '--x=cu -O'
        ldflags = '-lcublas -lcufft -lcusparse'
        if string.rfind(cc,'icc') >= 0:
            cflags = cflags + ' -ccbin=%s' % cc
            ldflags = '-ccbin=%s' % cc
        prog = env.Program(prog,cfile,
                           CC=NVCC,
                           LINKFLAGS=ldflags,
                           CFLAGS=cflags)
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='''
                             Please check if CUDA is not missing and is installed correctly.
                             Rerun Madagascar installation after it has been fixed.
                             ''')
    if root:
        env.Install(bindir,prog)

#######################################################################
# compiling CUDA+MPI programs

# YOU MAY HAVE TO EDIT THIS SECTION!!!
# MPI_LIB and MPI_INC must be defined for your specific system
MPI_LIB = '/usr/lib/openmpi/lib'	# MPI lib directory (contains libmpi.so)
MPI_INC = '/usr/lib/openmpi/include'	# MPI include directory	(contains mpi.h)

mpi_err = 0
if not os.path.exists(MPI_LIB + "/libmpi.so"):
	mpi_err += 1
if not os.path.exists(MPI_INC + "/mpi.h"):
	mpi_err += 1 


cuda_mpi_mains = Split(cuda_mpi_progs)
for prog in cuda_mpi_mains:
    if CTP and NVCC and (mpi_err == 0):
        cfile = env.Command('MPICUDA'+prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
        prog = env.Program(prog,cfile,
                           CC=NVCC,
                           LINKFLAGS='-L'+MPI_LIB+' -lmpi',
                           CFLAGS='-I'+MPI_INC+' --x=cu')
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='''
                             Please ensure CUDA and MPI are installed correctly.
                             Install script was unable to locate your mpi lib and/or include directory
                             Rerun Madagascar installation after it has been fixed.
                             ''')
    if root:
        env.Install(bindir,prog)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains+mpi_mains) + \
	map(lambda prog: env.Doc(prog,'M' + prog+'.cu'),cuda_mains + cuda_mpi_mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)


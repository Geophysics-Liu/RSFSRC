import os, sys, re, string
sys.path.append('../../framework')
import bldutil

# C main programs
progs = '''
Testeb Testfd2d Testfd3d dlct fpocs2d fpocs3d lsrtm2d modeling2d
mwni2d rtm2d
'''

# C++ main programs
ccprogs = '''
'''

# CUDA main programs
cuda_progs = '''
gpurtm
'''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../pwd/SConstruct')


env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsfpwd',
                  env.get('DYNLIB','')+'rsf'])


# fftw settings
fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

src = Glob('[a-z]*.c')

for source in Split(src):
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

# compiling C programs
mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if fftw:
        env.StaticObject('M'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw')
    if root:
        env.Install(bindir,prog)



if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None


ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)




# compiling CUDA programs
CTP = env.get('CUDA_TOOLKIT_PATH')
NVCC = env.get('NVCC')

cuda_mains = Split(cuda_progs)
for prog in cuda_mains:
    if CTP and NVCC:
        cfile = env.Command('CUDA'+prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
        cc = env.get('CC')
        cflags = '-prec-div=true -arch=sm_21 --x=cu -O'
        ldflags = ''
        if string.rfind(cc,'icc') >= 0:
            cflags = cflags + ' -ccbin=%s' % cc
            ldflags = '-ccbin=%s' % cc
        prog = env.Program(prog,cfile,
                           CC=NVCC,
                           LINKFLAGS=ldflags,
                           CFLAGS=cflags)
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='''
                             Please check if CUDA is not missing and is installed correctly.
                             Rerun Madagascar installation after it has been fixed.
                             ''')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) + \
	map(lambda prog: env.Doc(prog,'M' + prog+'.cu'),cuda_mains)

    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

